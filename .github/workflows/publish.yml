name: publish jar
on: [push]
permissions:
  contents: write

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas
          pip install numpy
      - run: sudo apt update
      - run: sudo apt install inotify-tools
      - run: inotifywait -mr /home/runner/work --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/test.csv & echo 'basak'
      - run: touch starting_publish_uses_16
      - run: rm starting_publish_uses_16
      - uses: actions/checkout@v3
      - run: touch starting_publish_uses_17
      - run: rm starting_publish_uses_17
      - uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'
          cache: 'maven'
      - run: touch starting_publish_Setversion_22
      - run: rm starting_publish_Setversion_22
      - name: Set version
        run: mvn versions:set -DnewVersion=${{ github.ref_name }}
      - run: touch starting_publish_Buildjar_24
      - run: rm starting_publish_Buildjar_24
      - name: Build jar
        run: mvn -B clean package -DskipTests 
      # - name: publish maven jar
      #   run: mvn -B deploy -DskipTests -DrepositoryId=github
        env:
      - run: touch starting_finished_finished_8979874
      - run: rm starting_finished_finished_8979874
      - uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import pandas as pd
            import numpy as np
            import time
            df = pd.read_csv('/home/runner/test.csv', sep = ';', names=['time', 'watched_filename', 'event_filename', 'event_name'])
            df['event_filename'] = df['event_filename'].replace(np.nan, '')
            steps = {}
            starting_indexes = df[(df['event_filename'].str.contains('starting_')) & (df['event_name'] == 'CREATE')].index.to_list() + [df.shape[0]]
            ending_indexes = [0] + df[(df['event_filename'].str.contains('starting_')) & (df['event_name'] == 'DELETE')].index.to_list()
            starting_df = df[df['event_filename'].str.contains('starting_')]
            touch_file_names = ['setup'] + [x.replace('starting_', '') for x in starting_df['event_filename'].value_counts().index.to_list()]
            for starting_index, ending_index, touch_file_name in zip(starting_indexes, ending_indexes, touch_file_names):
                steps[touch_file_name] = (ending_index, starting_index)
            df['watched_filename'] = df['watched_filename'] + df['event_filename']
            df.drop('event_filename', axis=1, inplace=True)
            df.rename(columns={'watched_filename':'file_name'}, inplace=True)
            create_df = df[df['event_name'] == 'CREATE']
            file_names = create_df['file_name'].value_counts().index.to_list()
            info = []
            for file_name in file_names:
                last_access_step = ''
                last_modify_step = ''
                creation_step = ''
                if df[(df['file_name'] == file_name) & (df['event_name'] == 'MODIFY')].shape[0] == 0: last_modify_index = -1
                else: last_modify_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'MODIFY')].index.to_list()[-1]
                last_access_index = 0
                if df[(df['file_name'] == file_name) & (df['event_name'] == 'ACCESS')].shape[0] > 0:
                    last_access_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'ACCESS')].index.to_list()[-1]
                else:
                    last_access_index = -1
                    last_access_step = 'Not provided'
                if last_access_index < last_modify_index:
                    try:
                        creation_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'CREATE')].index.to_list()[0]
                    except:
                        creation_index = -1
                        creation_step = 'Not provided'
                    for touch_file_name, (starting_index, ending_index) in steps.items():
                        if (last_access_index > starting_index) and (last_access_index < ending_index):
                            last_access_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                        if (last_modify_index > starting_index) and (last_modify_index < ending_index):
                            last_modify_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                        if (creation_index > starting_index) and (creation_index < ending_index):
                            creation_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                    info.append({'file_name': file_name, 'last_access_index': last_access_index, 'last_modify_index': last_modify_index, 'creation_index': creation_index, 'last_access_step':last_access_step , 'last_modify_step':last_modify_step, 'creation_step': creation_step})
            info_df = pd.DataFrame(info)
            info_df.to_csv('/home/runner/info.csv')
            step_statistics = []
            for step, (starting_index, ending_index) in steps.items():
                step_name = step if step == 'setup' else step.split('_')[1]
                created_file_count = info_df[info_df['creation_step'] == step_name].shape[0]
                created_never_accessed_file_count = info_df[(info_df['creation_step'] == step_name) & (info_df['last_modify_index'] == -1)].shape[0]
                modified_files_after_accessed_count = info_df[(info_df['creation_step'] == step_name) & (info_df['last_modify_index'] > info_df['last_access_index'])].shape[0]
                starting_time = list(map(int, df.iloc[starting_index]['time'].split(':')))
                if ending_index == len(df): ending_time = list(map(int, df.iloc[ending_index-1]['time'].split(':')))
                else: ending_time = list(map(int, df.iloc[ending_index]['time'].split(':')))
                hour = ending_time[0] - starting_time[0]
                if starting_time[1] > ending_time[1]:
                    minute = ending_time[1] - starting_time[1] + 60
                    hour -= 1
                else: minute = ending_time[1] - starting_time[1]
                if starting_time[2] > ending_time[2]:
                    second = ending_time[2] - starting_time[2] + 60
                    minute -= 1
                else: second = ending_time[2] - starting_time[2]
                total_seconds = second + (minute * 60) + (hour * 60 * 60)
                if step_name != '':
                    step_statistics.append({'step_name': step_name, 'number_of_created_files': created_file_count,
                     'number_of_files_created_never_accessed': created_never_accessed_file_count, 
                     'number_files_modified_after_accessed': modified_files_after_accessed_count, 'time': total_seconds})
            os.mkdir('optimizing-ci-builds-ci-analysis')
            step_df = pd.DataFrame(step_statistics)
            step_df.to_csv('/home/runner/work/ysoserial/ysoserial/optimizing-ci-builds-ci-analysis/steps.csv')
            info_df.to_csv('/home/runner/work/ysoserial/ysoserial/optimizing-ci-builds-ci-analysis/analysis.csv')
      - name: Pushes analysis to another repository
        id: push_directory
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source-directory: 'optimizing-ci-builds-ci-analysis'
          destination-github-username: 'optimizing-ci-builds'
          destination-repository-name: 'ci-analyzes'
          target-directory: 'ysoserial/1666179336/.github/workflows/publish/publish'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - run: touch starting_publish_Renameartifact_32
      - run: rm starting_publish_Renameartifact_32
      - name: Rename artifact
        run: mv target/ysoserial-${{ github.ref_name }}-all.jar target/ysoserial-all.jar

      - run: touch starting_publish_PublishGitHubrelease_35
      - run: rm starting_publish_PublishGitHubrelease_35
      - name: Publish GitHub release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}        
        with:
          files: target/ysoserial-all.jar
